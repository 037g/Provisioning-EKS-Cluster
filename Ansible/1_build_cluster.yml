---
#
# This Playbook provisions a new EKS cluster using eksctl
#
- hosts: localhost
  gather_facts: false
  vars:
    ansible_pyton_interpreter: "{{ ansible_playbook_python }}"
  vars_files:
    - "vars/{{ env }}.yml"

  pre_tasks:
    - name: Display Ansible Playbook Python Path.
      debug:
        msg: "Python Interperter at: {{ ansible_playbook_python }}"

    - name: Check if eksctl is installed.
      shell: eksctl version
      register: eksctl_version
      ignore_errors: true
      changed_when: false

    - name: Install eksctl.
      when: "not eksctl_version.rc == 0"
      shell: |
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            mv /tmp/eksctl /usr/local/bin

  tasks:
    - name: Check if {{ cluster_name }} cluster is running.
      shell: eksctl get cluster -o yaml | awk '$2 =="name:" {print $3}'
      register: prior_cluster_status_check
      ignore_errors: true
      changed_when: false

    - name: Abort Play. Cluster Exists.
      when: "prior_cluster_status_check.stdout == cluster_name"
      fail: msg="Cluster {{ cluster_name }} already exists."

    - name: "Create Cluster {{ cluster_name }}"
      when: "prior_cluster_status_check.stdout != cluster_name"
      shell: |
              eksctl create cluster --name {{ cluster_name }} \
                --region {{ aws_region }} \
                --version {{ k8_version }} \
                --vpc-cidr {{ vpc_cidr }} \
                --managed \
                --nodegroup-name {{ nodegroup_name }} \
                --nodes {{ node_group_nodes }} \
                --nodes-min {{ node_group_nodes_min }} \
                --nodes-max {{ node_group_nodes_max }} \
                --node-type {{ node_group_nodes_type }} \
                --ssh-access=true \
                --ssh-public-key={{ node_ssh_key }} \
                --external-dns-access \
                --alb-ingress-access \
                --asg-access \
                --tags "Project=Arctiq-Mission,COLOR={{ env }}"
      register: cluster_creation_result

    - name: Print Cluster Creation Output
      when: "prior_cluster_status_check.stdout != cluster_name and cluster_creation_result.rc == 0"
      debug:
        var: "{{ cluster_creation_result.stdout }}"

    - name: Print Cluster Creation Output Errors
      when: "prior_cluster_status_check.stdout != cluster_name and cluster_creation_result.rc != 0"
      debug:
        var: "{{ cluster_creation_result.stderr_lines }}"
