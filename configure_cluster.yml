---
#
# This Playbook provisions a new EKS cluster using eksctl
#
- hosts: localhost
  gather_facts: false

  vars:
    ansible_pyton_interpreter: "{{ ansible_playbook_python }}"
    # cluster_name: "eks-demo-c1"
    # aws_region: "us-west-2"
    #
    cluster_name: "eks-demo-c2"
    aws_region: "us-east-2"

  pre_tasks:
    - name: Display Ansible Playbook Python Path.
      debug:
        msg: "Python Interperter at: {{ ansible_playbook_python }}"

  tasks:
    - name: Get Context.
      shell: |
              kubectl config get-contexts | grep {{ cluster_name }} | awk '{print $2}'
      register: context_result
      changed_when: false
      
    - name: Set Cluster Context Fact.
      set_fact:
          context: "{{ context_result.stdout }}"

    
    - name: Install Associate-IAM-OIDC-Provider.
      # when: "prior_cluster_status_check.stdout != cluster_name"
      shell: |
              eksctl utils associate-iam-oidc-provider \
                --region {{ aws_region }} \
                --cluster {{ cluster_name }} \
                --approve
      register: oidc_result

    
    - name: Apply RBAC service account for ALB to cluster.
      shell: |
              kubectl apply -f https://raw.githubusercontent.com/kubernetes-sigs/aws-alb-ingress-controller/master/docs/examples/rbac-role.yaml
      register: rbac_service_result

    
    - name: Create only a policy on IAM.
      shell: |
              aws iam create-policy \
                  --policy-name EKS-{{ cluster_name }}-ALBIngressControllerIAMPolicy-{{ cluster_name | to_uuid }} \
                  --policy-document file://iam-policy.json
      register: alb_iam_policy_result
      ignore_errors: true

    
    - name: "Print ARN of policy"
      debug:
        msg: "{{alb_iam_policy_result.stdout_lines[1] | replace('Arn: ','')}}"

    
    - name: Set POLICY_ARN arn.
      set_fact:
          POLICY_ARN: "{{alb_iam_policy_result.stdout_lines[1] | replace('Arn: ','')}}"
    
    
    - name: Deploy ALB Ingress Controller.
      shell: |
              export EKS_CLUSTER_NAME={{ cluster_name }}
              kubectl config use-context {{ context }}
              cat alb-ingress-controller.yaml | envsubst | kubectl apply -f -
      register: alb_deployment_result

    
    # Create an IAM role for the ALB Ingress Controller and 
    # attach the role to the service account created in the previous step. 
    - name: Create IAM and attach it to ALB's K8 service account.
      shell: |
              kubectl config use-context {{ context }}
              eksctl create iamserviceaccount \
                --name alb-ingress-controller \
                --namespace kube-system \
                --cluster {{ cluster_name }} \
                --region {{ aws_region }} \
                --attach-policy-arn {{ POLICY_ARN }} \
                --approve \
                --override-existing-serviceaccounts
      register: iam_service_account_result
      ignore_errors: true
